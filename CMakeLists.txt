# Generated by `boostdep --cmake thread`
# Copyright 2020 Peter Dimov
# Distributed under the Boost Software License, Version 1.0.
# https://www.boost.org/LICENSE_1_0.txt

cmake_minimum_required(VERSION 3.5...3.16)

project(boost_thread VERSION "${BOOST_SUPERPROJECT_VERSION}" LANGUAGES CXX)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

if(WIN32)

  set(THREAD_SOURCES
    src/win32/thread.cpp
    src/win32/tss_dll.cpp
    src/win32/tss_pe.cpp
    src/win32/thread_primitives.cpp
    src/future.cpp
  )

else()

  set(THREAD_SOURCES
    src/pthread/thread.cpp
    src/pthread/once.cpp
    src/future.cpp
  )

endif()

add_library(boost_thread ${THREAD_SOURCES})

add_library(Boost::thread ALIAS boost_thread)

target_include_directories(boost_thread PUBLIC include)

target_link_libraries(boost_thread
  PUBLIC
    Boost::assert
    Boost::atomic
    Boost::bind
    Boost::chrono
    Boost::concept_check
    Boost::config
    Boost::container
    Boost::container_hash
    Boost::core
    Boost::date_time
    Boost::exception
    Boost::function
    Boost::intrusive
    Boost::io
    Boost::iterator
    Boost::move
    Boost::optional
    Boost::predef
    Boost::preprocessor
    Boost::smart_ptr
    Boost::static_assert
    Boost::system
    Boost::throw_exception
    Boost::tuple
    Boost::type_traits
    Boost::utility
    Boost::winapi

    Threads::Threads

  PRIVATE
    Boost::algorithm
    Boost::lexical_cast
)

target_compile_definitions(boost_thread
  PUBLIC BOOST_THREAD_NO_LIB
  PRIVATE BOOST_THREAD_SOURCE
)

if(BUILD_SHARED_LIBS)
  target_compile_definitions(boost_thread PUBLIC BOOST_THREAD_DYN_LINK BOOST_THREAD_USE_DLL)
else()
  target_compile_definitions(boost_thread PUBLIC BOOST_THREAD_STATIC_LINK BOOST_THREAD_USE_LIB)
endif()

if(BUILD_TESTING AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt")

  add_subdirectory(test)

endif()

